vue使用记录 --外包服务平台的实现

本文将通过一个练习项目来记录下自己对vue的使用经历
需求如下：
总体是一个外包项目管理的系统。
它具有如下几个主要功能点，
一 人员管理
二 考勤
三 任务管理

首先确定界面原型
我们将界面划分为两块，一块是导航栏，一块是界面展示区。
导航栏的不同选项将刷新界面展示区的内容。
所以首页(mainpage.vue)将由 header.vue和body.vue构成
为了切换显示不同的内容，mainpage.vue将采用动态组件
那么mainpage.vue中将包含两大类组件，一类是头部组件（虽然大概率只有一个），一个是主干组件，我想以
components:{
	headercomponents:{},
	bodycomponents:{}
}
这样的形式存放，这样会清晰一点，能做到吗？todo
导航栏区和界面展示区的绑定语句是这样的
    <component :is="headis">
    </component>
    <component :is="bodyis">
    </component>
bodyis和headis的值就由mainpage.vue中的方法来切换
但是怎么知道要切换到哪个组件呢？因为mainpage.vue页面就光秃秃的两个子组件，它怎么知道什么点击了，我要做什么呢？换言之，这个问题是 如何实现父子组件间的通信
我决定使用“事件”。
所以head和body的接口将是这样的
<head @changeHEAD="changethehead(component)"/>
<body @changeBODY="changethebody(component)"/>  //话说释放事件名和方法名能不能重名啊
这里写错了，处理事件的函数不需要写上参数，在函数声明那里写上参数声明就可以了，真是有趣呢。正确写法是
<head @changeHEAD="changethehead(component)"/>
<body @changeBODY="changethebody(component)"/>
处理事件的函数声明(示例)：
changethebody: function(msg,msg2){
      console.log(msg,msg2)
    }
子组件释放事件代码:
this.$emit('changeBODY','参数1','参数2') 参数完全可以多写，另一边要不要接受都随意。
现在，我们主界面已经渲染出了默认的导航栏和主干部分，
主干部分上有我们获取到的项目列表
接下来就可以完成一个功能：
点击项目显示相应的项目主页
这里考虑的问题有
1.怎么设置路由
基于主页路径是/的情况下（请先搁置说项目主页不应该是这个内容，路由可以在后期再改，依据现在开发的情况来）
应该设置为动态路由
/project/:id
这样的话，安全问题怎么解决？实际上这个路由应该是
/userid/project/:id
在解析userid的时候考虑安全问题就可以了吧，即后期把
/project做成/userid的子路由
错了 这里又错了
现在整个项目的架构已经变成：只有一个主页，其他东西都是按需渲染在相应位置的，哪来这么多路由配置？转换已经说了，由事件完成
todo
我在想这里有这么多的事件，目前是层层提交上去的，是否能做个“事件处理中心”来统一处理，现在有点变更，得层层修改下去，而且很散乱。

接下来我们的项目已经确定好了主界面的布局，我们已经在主界面显示了个人所关联的项目，除了这些项目，还需要在末尾加上一个添加项目的功能框。
这个功能框的元素和其他项目元素不同，中间应该有个添加按钮，我们将使用插槽(slot)
为了使文字或图标部分居中，我们需要设置css样式，但是有个问题是，我们使用了element的组件，用了它的标签，这个标签在实际使用的时候它会展开（也就是说我们中间包裹着的内容会多出几个标签，那么我们在这种情况下设置样式就没用了）虽然我们能先打开看看它会打出什么标签，但是还是没用，因为这样我们的css样式必须设成全局了，不然影响不到（这个标签在父级元素才展开）。我们固然可以在父级元素中设置，但是这样岂不是很不优雅？组件自己的问题应该自己解决好，怎么能留个问题给父组件呢？如果是全局的css，鬼知道会污染到哪里！哎呀！
todo
这里暂且先用全局css了，留坑
//////
新建项目的工作就留给豪明来做吧！
具体操作是 点击页面中的添加项目选项（好像应该只能在我管理的项目那里添加把，先不管上面那个，在下面添加项目，添加项目的时候应该体现项目计划，里程碑，人员级别管理，邀请啦等等的功能，按你的想法去做把。）








首先让我们着重完成任务管理这部分
从不同类人员角度来看我们需要提供如下几个功能点：
对项目管理者来说：
1.可以制定项目计划，指定参与人员
2.可以发布任务，指定参与人员
3.可以查看分配出去的任务的完成状况

我们首先回避第一点，从发布任务着手
