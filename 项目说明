vue使用记录 --外包服务平台的实现

本文将通过一个练习项目来记录下自己对vue的使用经历
需求如下：
总体是一个外包项目管理的系统。
它具有如下几个主要功能点，
一 人员管理
二 考勤
三 任务管理

首先确定界面原型
我们将界面划分为两块，一块是导航栏，一块是界面展示区。
导航栏的不同选项将刷新界面展示区的内容。
所以首页(mainpage.vue)将由 header.vue和body.vue构成
为了切换显示不同的内容，mainpage.vue将采用动态组件
那么mainpage.vue中将包含两大类组件，一类是头部组件（虽然大概率只有一个），一个是主干组件，我想以
components:{
	headercomponents:{},
	bodycomponents:{}
}
这样的形式存放，这样会清晰一点，能做到吗？todo
导航栏区和界面展示区的绑定语句是这样的
    <component :is="headis">
    </component>
    <component :is="bodyis">
    </component>
bodyis和headis的值就由mainpage.vue中的方法来切换
但是怎么知道要切换到哪个组件呢？因为mainpage.vue页面就光秃秃的两个子组件，它怎么知道什么点击了，我要做什么呢？换言之，这个问题是 如何实现父子组件间的通信
我决定使用“事件”。
所以head和body的接口将是这样的
<head @changeHEAD="changethehead(component)"/>
<body @changeBODY="changethebody(component)"/>  //话说释放事件名和方法名能不能重名啊
这里写错了，处理事件的函数不需要写上参数，在函数声明那里写上参数声明就可以了，真是有趣呢。正确写法是
<head 
 	@changeHEAD="changethehead"
/>
<body 
	@changeBODY="changethebody" //处理变换Body的函数
/>
处理事件的函数声明(示例)：
changethebody: function(msg,msg2){ //参数告诉mainpage将要选择的组件是什么
      console.log(msg,msg2)
    }
子组件释放事件代码:
this.$emit('changeBODY','参数1','参数2') 参数完全可以多写，另一边要不要接受都随意。
现在，我们主界面已经渲染出了默认的导航栏和主干部分，
主干部分上有我们获取到的项目列表
接下来就可以完成一个功能：
点击项目显示相应的项目主页
这里考虑的问题有
1.怎么设置路由
基于主页路径是/的情况下（请先搁置说项目主页不应该是这个内容，路由可以在后期再改，依据现在开发的情况来）
应该设置为动态路由
/project/:id
这样的话，安全问题怎么解决？实际上这个路由应该是
/userid/project/:id
在解析userid的时候考虑安全问题就可以了吧，即后期把
/project做成/userid的子路由
错了 这里又错了
现在整个项目的架构已经变成：只有一个主页，其他东西都是按需渲染在相应位置的，哪来这么多路由配置？转换已经说了，由事件完成
todo
我在想这里有这么多的事件，目前是层层提交上去的，是否能做个“事件处理中心”来统一处理，现在有点变更，得层层修改下去，而且很散乱。

接下来我们的项目已经确定好了主界面的布局，我们已经在主界面显示了个人所关联的项目，除了这些项目，还需要在末尾加上一个添加项目的功能框。
这个功能框的元素和其他项目元素不同，中间应该有个添加按钮，我们将使用插槽(slot)
为了使文字或图标部分居中，我们需要设置css样式，但是有个问题是，我们使用了element的组件，用了它的标签，这个标签在实际使用的时候它会展开（也就是说我们中间包裹着的内容会多出几个标签，那么我们在这种情况下设置样式就没用了）虽然我们能先打开看看它会打出什么标签，但是还是没用，因为这样我们的css样式必须设成全局了，不然影响不到（这个标签在父级元素才展开）。我们固然可以在父级元素中设置，但是这样岂不是很不优雅？组件自己的问题应该自己解决好，怎么能留个问题给父组件呢？如果是全局的css，鬼知道会污染到哪里！哎呀！
todo
这里暂且先用全局css了，留坑 这种坑必须被消灭！！！
//////
新建项目的工作就留给豪明来做吧！
具体操作是 点击页面中的添加项目选项（好像应该只能在我管理的项目那里添加把，先不管上面那个，在下面添加项目，添加项目的时候应该体现项目计划，里程碑，人员级别管理，邀请啦等等的功能，按你的想法去做把。）

现在已经完成的部分有：
主页布局及主页内容的替换，及通过项目点击进入项目主页

现在项目主页已经有了任务列表，需要实现点击弹出任务框的功能
事件层层递交非常麻烦!!!寻求一个更好的方案
想现在点击任务的情况是，点击任务，上传点击事件给任务列表，然后任务列表上传给项目界面，然后项目界面做出动作，每一级的元素都是@事件名=“处理方法名”
现在想，逐级上传有没有必要，首先不知道跨级上传事件的可能性，目前来看层级也不会超过3级，姑且如此把。在这里将事件名统一下就可以了。点击事件统一click1、2、3这样把。处理方法则加上前缀for
呜呼，代码之冗余，国之不幸！

现在弹窗，因为是先期将弹窗占满整个页面，然后隐藏掉的，但是这玩意阻挡了div的点击事件

现在先改用element提供的对话框
这里实现的功能是这样的，点击一条任务，弹出相应内容。
这里的实现方式说明下，element提供的组件的显示与否与一个变量的真值相关联，
在项目主页面相关部分的代码是这样的：
      <projectheadr></projectheadr>
      <projectbody @click1="forclick1"></projectbody>
      <renwustate3 :dialogVisible="dialogvisible" @close1="forclose1"    >
      </renwustate3>
这样的设计意味着，所有的任务的点击事件都将关联到body的层级。（有其他设计吗？是否会比这个好？这个不需要修改其他组件中间过程的代码，但是会需要层层回调，而且不保证回调数据量很小，可能效率较低）
我们将传入一个参数来操作对话框的显示与否（其实应该更多，将任务相关信息传递过去），这是动态绑定的（一旦变量变化都将重新传递）
那么这里有个问题，dialogvisible直接关联对话框的显示与否（至少我们的意图是这样的，其实我们一开始的意图是让它使对话框显示，然后让对话框的组件内部执行关闭的操作，但是这做不到，因为不与dialogvisible进行联系的话，dialogvisible就变成一次性的了（保持着为真的状态）），那么我选择了使用 “事件” 来让子组件和父组件的dialogvisible保持联系。
那么renwustate3的接口变为
<renwustate3 
	:dialogVisible="dialogvisible" //初始化为false
	@close1="forclose1" //将对话框关闭的事件通知给父组件>
</renwustate3>
//所以你理解java的接口(implement)了吗？我保证你实现某种功能，但是你必须实现我要求的函数，这里要求的函数是forclose1，要求的变量是dialogVisible


首先让我们着重完成任务管理这部分
从不同类人员角度来看我们需要提供如下几个功能点：
对项目管理者来说：
1.可以制定项目计划，指定参与人员
2.可以发布任务，指定参与人员
3.可以查看分配出去的任务的完成状况

我们首先回避第一点，从发布任务着手
第一步，确定任务的原型
原本想自己布局的，但是结果好瞎，尝试下element的表单吧
最后还是自己布局的。
这个任务模板我想这样弄，
弄一个没有填数据的空白模板，作为创建任务时使用。而显示已经创建好的任务呢，就使用插槽<slot>在这个模板中填入数据。这里需要后端提供一个接口是这样的：
（传参数任务id(暂定），后端返回一个json格式的数据，内容要包括：
		任务id,任务名，任务参与者，任务说明，任务完成期限，子任务 
  没有则为空
同样的，我在创建了任务之后，也会回传类似数据录入服务器
任务相关的第二个后台接口：
 传参数项目id，返回与之相关的所有项目人员，于一个列表中，属性至少要有
	id,
	name//姓名
现在完成一个函数，用于筛选这个列表中的人员，就是模糊匹配
完成，就是效率有点低。
现将数组保存到一个临时变量里（注意不要只是保存一个指针哦）
然后用模糊匹配把不合格的去掉，
每次搜索字改变（也就是第二次及以后）
数组都从那个临时变量里读取初始数据，然后进行筛选。
（其实有很多优化方法，比如检测下搜索关键字是不是递增的，巴拉巴拉）

然后点击之后加入到此项任务的参与者中


事件机制有个问题，只知道将事件报告给了父组件，但不知道父组件是谁

//
vs code 里面 如何 去掉 invalid-end-tag 的lint错误
 .eslintrc.js
 rules:{
     'vue/no-parsing-error': [2, {
      "x-invalid-end-tag": false
    }]
 }
 
 settings 里面的配置：
 "vetur.validation.template": false
//
